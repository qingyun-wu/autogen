//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoGen.SourceGenerator.Template {
    using System.Linq;
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis;
    using System;
    
    
    internal partial class FunctionCallTemplate : FunctionCallTemplateBase {
        

public string NameSpace {get; set;}
public string ClassName {get; set;}
public IEnumerable<SourceGeneratorFunctionContract> FunctionContracts {get; set;}
public bool IsStatic {get; set;} = false;

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write(@"//----------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
//----------------------
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System;
using AutoGen.Core;
using AutoGen.OpenAI.Extension;

");
if (!String.IsNullOrEmpty(NameSpace)) {
            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(NameSpace));
            this.Write("\n{\n");
}
            this.Write("    public partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            this.Write("\n    {\n");
foreach (var functionContract in FunctionContracts) {
            this.Write("\n        private class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionSchemaClassName()));
            this.Write("\n        {\n");
foreach (var parameter in functionContract.Parameters) {
if (parameter.IsOptional) {
            this.Write("            [JsonPropertyName(@\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            this.Write("\")]\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            this.Write(" {get; set;} = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DefaultValue));
            this.Write(";\n");
} else {
            this.Write("            [JsonPropertyName(@\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            this.Write("\")]\n\t\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            this.Write(" {get; set;}\n");
}
}
            this.Write("        }\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.ReturnType));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionWrapperName()));
            this.Write("(string arguments)\n        {\n            var schema = JsonSerializer.Deserialize<" +
                    "");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionSchemaClassName()));
            this.Write(">(\n                arguments, \n                new JsonSerializerOptions\n        " +
                    "        {\n                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase," +
                    "\n                });\n");
 var argumentLists = string.Join(", ", functionContract.Parameters.Select(p => $"schema.{p.Name}")); 
            this.Write("\n            return ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(argumentLists));
            this.Write(");\n        }\n\n        public FunctionContract ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionContractName()));
            this.Write("\n        {\n            get => new FunctionContract\n            {\n");
if (functionContract.Namespace != null) {
            this.Write("                Namespace = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.Namespace));
            this.Write("\",\n");
}
if (functionContract.ClassName != null) {
            this.Write("                ClassName = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.ClassName));
            this.Write("\",\n");
}
if (functionContract.Name != null) {
            this.Write("                Name = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.Name));
            this.Write("\",\n");
}
if (functionContract.Description != null) {
            this.Write("                Description = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.Description.Replace("\"", "\"\"")));
            this.Write("\",\n");
}
if (functionContract.ReturnType != null) {
            this.Write("                ReturnType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.ReturnType));
            this.Write("),\n");
}
if (functionContract.ReturnDescription != null) {
            this.Write("                ReturnDescription = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.ReturnDescription));
            this.Write("\",\n");
}
if (functionContract.Parameters != null) {
            this.Write("                Parameters = new global::AutoGen.Core.FunctionParameterContract[]" +
                    "\n                {\n");
foreach (var parameter in functionContract.Parameters) {
            this.Write("                    new FunctionParameterContract\n                    {\n");
if (parameter.Name != null) {
            this.Write("                        Name = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            this.Write("\",\n");
}
if (parameter.Description != null) {
            this.Write("                        Description = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( parameter.Description.Replace("\"", "\"\"") ));
            this.Write("\",\n");
}
if (parameter.Type != null) {
            this.Write("                        ParameterType = typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Type));
            this.Write("),\n");
}
            this.Write("                        IsRequired = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.IsOptional ? "false" : "true"));
            this.Write(",\n");
if (parameter.DefaultValue != null) {
            this.Write("                        DefaultValue = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DefaultValue));
            this.Write(",\n");
}
            this.Write("                    },\n");
}
            this.Write("                },\n");
}
            this.Write("            };\n        }\n\n        public global::Azure.AI.OpenAI.FunctionDefiniti" +
                    "on ");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionDefinitionName()));
            this.Write("\n        {\n            get => this.");
            this.Write(this.ToStringHelper.ToStringWithCulture(functionContract.GetFunctionContractName()));
            this.Write(".ToOpenAIFunctionDefinition();\n        }\n");
}
            this.Write("    }\n");
if (!String.IsNullOrEmpty(NameSpace)) {
            this.Write("}\n");
}
            this.Write("\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class FunctionCallTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
